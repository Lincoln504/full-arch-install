#!/bin/bash
# Ansible Managed: Template for sway-autorotate.sh
# !! USER ADJUSTMENT REQUIRED on final system !!
TABLET_MODE_SYSFS_PATH="" # MUST be set manually post-install.
TOUCHSCREEN_IDENTIFIER_PATTERN="{{ touchscreen_identifier_pattern | default('Touch') }}"
KEYBOARD_IDENTIFIER_PATTERN="keyboard"
TOUCHPAD_IDENTIFIER_PATTERN="Touchpad"
DISPLAY_DEVICE_NAME_PATTERN="eDP|DP|HDMI-A"
TOUCHSCREEN_DEVICE="" KEYBOARD_DEVICE="" TOUCHPAD_DEVICE="" DISPLAY_DEVICE="" last_orientation="unknown" last_tablet_mode_state=-1
find_device() { local type="$1" input_or_output="$2" pattern="$3" query="" result="" swaymsg_path jq_path; swaymsg_path=$(command -v swaymsg); jq_path=$(command -v jq); if [ -z "$swaymsg_path" ] || [ -z "$jq_path" ]; then echo "Warning: swaymsg or jq not found." >&2; return 1; fi; if ! "$swaymsg_path" -t get_version > /dev/null 2>&1; then return 1; fi; if [ "$input_or_output" == "input" ]; then query='.[] | select(.type=="keyboard" or .type=="touchpad" or .type=="touch") | select(.identifier | test("'$pattern'"; "i")) | .identifier'; result=$("$swaymsg_path" -t get_inputs --raw | "$jq_path" -r "$query" | head -n 1); elif [ "$input_or_output" == "output" ]; then query_internal='.[] | select(.active==true and (.name | test("eDP"; "i"))) | .name'; result=$("$swaymsg_path" -t get_outputs --raw | "$jq_path" -r "$query_internal" | head -n 1); if [ -z "$result" ]; then query_any='.[] | select(.active==true) | select(.name | test("'$pattern'"; "i")) | .name'; result=$("$swaymsg_path" -t get_outputs --raw | "$jq_path" -r "$query_any" | head -n 1); fi; else echo "Warning: Invalid type '$input_or_output' for find_device." >&2; return 1; fi; if [ -z "$result" ]; then return 1; fi; echo "$result"; return 0; }
check_tablet_mode() { if [ -z "$TABLET_MODE_SYSFS_PATH" ] || [ ! -f "$TABLET_MODE_SYSFS_PATH" ]; then if [ "$last_tablet_mode_state" != 2 ]; then echo "$(date '+%Y-%m-%d %H:%M:%S') Info: Tablet mode sysfs path ('$TABLET_MODE_SYSFS_PATH') not valid or not set. Tablet mode detection disabled."; fi; return 2; fi; local state; state=$(cat "$TABLET_MODE_SYSFS_PATH" 2>/dev/null); if [ "$state" = "1" ]; then return 0; else return 1; fi; }
set_input_device_state() { local device_identifier="$1" state="$2" swaymsg_path timeout_path; swaymsg_path=$(command -v swaymsg); timeout_path=$(command -v timeout); if [ -z "$device_identifier" ] || [ -z "$swaymsg_path" ] || [ -z "$timeout_path" ]; then return; fi; if ! "$swaymsg_path" -t get_version > /dev/null 2>&1; then return; fi; echo "$(date '+%Y-%m-%d %H:%M:%S') Setting input device '$device_identifier' events to '$state'"; if ! "$timeout_path" 2s "$swaymsg_path" input "$device_identifier" events "$state"; then echo "$(date '+%Y-%m-%d %H:%M:%S') Error or timeout setting state for '$device_identifier'" >&2; fi; }
update_devices() { TOUCHSCREEN_DEVICE=$(find_device "input" "input" "$TOUCHSCREEN_IDENTIFIER_PATTERN"); KEYBOARD_DEVICE=$(find_device "input" "input" "$KEYBOARD_IDENTIFIER_PATTERN"); TOUCHPAD_DEVICE=$(find_device "input" "input" "$TOUCHPAD_IDENTIFIER_PATTERN"); DISPLAY_DEVICE=$(find_device "output" "output" "$DISPLAY_DEVICE_NAME_PATTERN"); }
update_devices
log_prefix="$(date '+%Y-%m-%d %H:%M:%S') [Autorotate]"; echo "$log_prefix Starting autorotate script..."; echo "$log_prefix Display Pattern: '$DISPLAY_DEVICE_NAME_PATTERN', Found: '${DISPLAY_DEVICE:-Not Found}'"; echo "$log_prefix Touchscreen Pattern: '$TOUCHSCREEN_IDENTIFIER_PATTERN', Found: '${TOUCHSCREEN_DEVICE:-Not Found}'"; echo "$log_prefix Keyboard Pattern: '$KEYBOARD_IDENTIFIER_PATTERN', Found: '${KEYBOARD_DEVICE:-Not Found}'"; echo "$log_prefix Touchpad Pattern: '$TOUCHPAD_IDENTIFIER_PATTERN', Found: '${TOUCHPAD_DEVICE:-Not Found}'"; echo "$log_prefix Tablet Mode Path: '${TABLET_MODE_SYSFS_PATH:-Not Set/Found}' (NEEDS CONFIGURATION MANUALLY!)"
monitor_sensor_path=$(command -v monitor-sensor); if [ -z "$monitor_sensor_path" ]; then echo "$log_prefix Error: monitor-sensor command not found." >&2; exit 1; fi
stdbuf -oL "$monitor_sensor_path" --accel | while IFS= read -r line; do swaymsg_path=$(command -v swaymsg); if [ -n "$swaymsg_path" ] && "$swaymsg_path" -t get_version > /dev/null 2>&1; then if [ -z "$DISPLAY_DEVICE" ] || [ -z "$TOUCHSCREEN_DEVICE" ] || [ -z "$KEYBOARD_DEVICE" ] || [ -z "$TOUCHPAD_DEVICE" ]; then echo "$log_prefix Retrying device discovery..."; update_devices; echo "$log_prefix Found Devices: Disp='${DISPLAY_DEVICE:-NF}', TS='${TOUCHSCREEN_DEVICE:-NF}', KB='${KEYBOARD_DEVICE:-NF}', TP='${TOUCHPAD_DEVICE:-NF}'"; fi; else DISPLAY_DEVICE="" TOUCHSCREEN_DEVICE="" KEYBOARD_DEVICE="" TOUCHPAD_DEVICE=""; sleep 5; continue; fi; check_tablet_mode; current_tablet_mode_state=$?; if [ "$current_tablet_mode_state" != "$last_tablet_mode_state" ]; then case "$current_tablet_mode_state" in 0) echo "$log_prefix Entering Tablet Mode: Disabling keyboard/touchpad."; set_input_device_state "$KEYBOARD_DEVICE" "disabled"; set_input_device_state "$TOUCHPAD_DEVICE" "disabled" ;; 1) echo "$log_prefix Entering Laptop Mode: Enabling keyboard/touchpad."; set_input_device_state "$KEYBOARD_DEVICE" "enabled"; set_input_device_state "$TOUCHPAD_DEVICE" "enabled" ;; 2) if [ "$last_tablet_mode_state" != 2 ]; then echo "$log_prefix Tablet mode detection disabled/failed: Ensuring keyboard/touchpad are enabled (default state)."; set_input_device_state "$KEYBOARD_DEVICE" "enabled"; set_input_device_state "$TOUCHPAD_DEVICE" "enabled"; fi ;; esac; last_tablet_mode_state=$current_tablet_mode_state; fi; orientation=$(echo "$line" | grep --line-buffered -oP 'Orientation changed: \K\S+'); if [ -n "$orientation" ] && [ "$orientation" != "$last_orientation" ]; then echo "$log_prefix Detected orientation: $orientation"; last_orientation="$orientation"; new_transform=""; case "$orientation" in "normal") new_transform="normal";; "left-up") new_transform="90";; "right-up") new_transform="270";; "bottom-up") new_transform="180";; *) echo "$log_prefix Unknown orientation: $orientation"; continue;; esac; if [ -n "$DISPLAY_DEVICE" ] && [ -n "$swaymsg_path" ]; then current_transform=$("$swaymsg_path" -t get_outputs --raw | jq -r --arg name "$DISPLAY_DEVICE" '.[] | select(.name==$name) | .transform // "unknown"'); if [ "$current_transform" != "$new_transform" ]; then echo "$log_prefix Applying transform '$new_transform' to display '$DISPLAY_DEVICE'"; if "$swaymsg_path" output "$DISPLAY_DEVICE" transform "$new_transform"; then if [ -n "$TOUCHSCREEN_DEVICE" ]; then echo "$log_prefix Mapping input '$TOUCHSCREEN_DEVICE' to output '$DISPLAY_DEVICE'"; sleep 0.5; "$swaymsg_path" input "$TOUCHSCREEN_DEVICE" map_to_output "$DISPLAY_DEVICE"; fi; else echo "$log_prefix Error applying transform with swaymsg." >&2; fi; elif [ -n "$TOUCHSCREEN_DEVICE" ]; then echo "$log_prefix Re-mapping input '$TOUCHSCREEN_DEVICE' to output '$DISPLAY_DEVICE' (transform unchanged)"; "$swaymsg_path" input "$TOUCHSCREEN_DEVICE" map_to_output "$DISPLAY_DEVICE"; fi; else echo "$log_prefix Display device unknown or swaymsg not found, cannot apply transform yet."; sleep 2; fi; fi; done
echo "$log_prefix Autorotate script exiting."
